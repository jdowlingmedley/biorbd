// File : biorbd_rigidbody.i
%{
#include <rbdl/Model.h>
#include <rbdl/Kinematics.h>
#include <rbdl/Dynamics.h>

#include "RigidBody/Segment.h"
#include "RigidBody/GeneralizedCoordinates.h"
#include "RigidBody/GeneralizedVelocity.h"
#include "RigidBody/GeneralizedAcceleration.h"
#include "RigidBody/GeneralizedTorque.h"
#include "RigidBody/NodeSegment.h"
#include "RigidBody/SegmentCharacteristics.h"
#include "RigidBody/Contacts.h"
#include "RigidBody/Mesh.h"
#ifndef SKIP_KALMAN
#include "RigidBody/KalmanRecons.h"
#include "RigidBody/KalmanReconsMarkers.h"
#include "RigidBody/KalmanReconsIMU.h"
#endif
#include "RigidBody/MeshFace.h"
#include "RigidBody/IMU.h"
#include "RigidBody/IMUs.h"
#include "RigidBody/Integrator.h"
%}


namespace std {
%template(VecBiorbdGeneralizedTorque) std::vector<biorbd::rigidbody::GeneralizedTorque>;
%template(MatBiorbdGeneralizedTorque) std::vector<std::vector<biorbd::rigidbody::GeneralizedTorque>>;
%template(VecBiorbdGeneralizedCoordinates) std::vector<biorbd::rigidbody::GeneralizedCoordinates>;
%template(MatBiorbdGeneralizedCoordinates) std::vector<std::vector<biorbd::rigidbody::GeneralizedCoordinates>>;

%template(VecBiorbdNodeSegment) std::vector<biorbd::rigidbody::NodeSegment>;
%template(MatBiorbdNodeSegment) std::vector<std::vector<biorbd::rigidbody::NodeSegment>>;
%template(VecBiorbdMeshFace) std::vector<biorbd::rigidbody::MeshFace>;
%template(MatBiorbdMeshFace) std::vector<std::vector<biorbd::rigidbody::MeshFace>>;

%template(PairBiorbdNodeSegment) std::pair<biorbd::rigidbody::NodeSegment, biorbd::rigidbody::NodeSegment>;
}

// Exposing some useful functions
%extend biorbd::Model{
    biorbd::rigidbody::GeneralizedTorque InverseDynamics(
                const biorbd::rigidbody::GeneralizedCoordinates &Q,
                const biorbd::rigidbody::GeneralizedVelocity &QDot,
                const biorbd::rigidbody::GeneralizedAcceleration &QDDot) {
        self->checkGeneralizedDimensions(&Q, &QDot, &QDDot);

        biorbd::rigidbody::GeneralizedTorque Tau(self->nbGeneralizedTorque());
        RigidBodyDynamics::InverseDynamics(*self, Q, QDot, QDDot, Tau);
        return Tau;
    }

    biorbd::rigidbody::GeneralizedCoordinates ForwardDynamics(
                const biorbd::rigidbody::GeneralizedCoordinates &Q,
                const biorbd::rigidbody::GeneralizedVelocity &QDot,
                const biorbd::rigidbody::GeneralizedTorque &Tau) {
        self->checkGeneralizedDimensions(&Q, &QDot, nullptr, &Tau);

        biorbd::rigidbody::GeneralizedCoordinates QDDot(*self);
        RigidBodyDynamics::ForwardDynamics(*self, Q, QDot, Tau, QDDot);
        return QDDot;
    }

#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX ForwardDynamics(
                const casadi::MX &Q,
                const casadi::MX &QDot,
                const casadi::MX &Tau){
        biorbd::rigidbody::GeneralizedCoordinates QDDot(*self);
        RigidBodyDynamics::ForwardDynamics(*self, Q, QDot, Tau, QDDot);
        return QDDot;
    }
#endif

    biorbd::rigidbody::GeneralizedCoordinates ForwardDynamicsLagrangian(
                const biorbd::rigidbody::GeneralizedCoordinates &Q,
                const biorbd::rigidbody::GeneralizedVelocity &QDot,
                const biorbd::rigidbody::GeneralizedTorque &Tau) {
        self->checkGeneralizedDimensions(&Q, &QDot, nullptr, &Tau);

        biorbd::rigidbody::GeneralizedCoordinates QDDot(*self);
        RigidBodyDynamics::ForwardDynamicsLagrangian(*self, Q, QDot, Tau, QDDot);
        return QDDot;
    }

    biorbd::rigidbody::GeneralizedCoordinates ForwardDynamicsConstraintsDirect(
                const biorbd::rigidbody::GeneralizedCoordinates &Q,
                const biorbd::rigidbody::GeneralizedVelocity &QDot,
                const biorbd::rigidbody::GeneralizedTorque &Tau,
                biorbd::rigidbody::Contacts& CS) {
        self->checkGeneralizedDimensions(&Q, &QDot, nullptr, &Tau);

        biorbd::rigidbody::GeneralizedCoordinates QDDot(*self);
        RigidBodyDynamics::ForwardDynamicsConstraintsDirect(*self, Q, QDot, Tau, CS, QDDot);
        return QDDot;
    }

    biorbd::rigidbody::GeneralizedCoordinates ForwardDynamicsConstraintsDirect(
                const biorbd::rigidbody::GeneralizedCoordinates &Q,
                const biorbd::rigidbody::GeneralizedVelocity &QDot,
                const biorbd::rigidbody::GeneralizedTorque &Tau) {
        self->checkGeneralizedDimensions(&Q, &QDot, nullptr, &Tau);

        biorbd::rigidbody::GeneralizedCoordinates QDDot(*self);
        biorbd::rigidbody::Contacts& CS = self->getConstraints();
        RigidBodyDynamics::ForwardDynamicsConstraintsDirect(*self, Q, QDot, Tau, CS, QDDot);
        return QDDot;
    }

#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX markers(
                const casadi::MX &Q){
        std::vector<biorbd::rigidbody::NodeSegment> allMarkers(self->biorbd::rigidbody::Markers::markers(Q));
        casadi::MX out(3, allMarkers.size());
        for (unsigned int i=0; i<allMarkers.size(); ++i){
            for (unsigned int j=0; j<3; ++j){
                out(j, i) = allMarkers[i](j);
            }
        }
        return out;
    }
#endif
}

%include "@CMAKE_SOURCE_DIR@/include/RigidBody/RigidBodyEnums.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/Joints.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/Segment.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/GeneralizedCoordinates.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/GeneralizedVelocity.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/GeneralizedAcceleration.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/GeneralizedTorque.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/Markers.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/NodeSegment.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/Contacts.h"
@SWIG_KALMAN_INCLUDE_COMMAND@
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/Mesh.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/MeshFace.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/IMU.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/IMUs.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/SegmentCharacteristics.h"
%include "@CMAKE_SOURCE_DIR@/include/RigidBody/Integrator.h"
